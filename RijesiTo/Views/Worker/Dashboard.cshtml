@{
    ViewData["Title"] = "Worker Dashboard";
}

<h2>Available Tasks</h2>
<div id="taskList" class="row"></div>

<script>
    async function loadTasks() {
        const res = await fetch('/Worker/GetAvailableTasks');
        const tasks = await res.json();
        const container = document.getElementById('taskList');
        container.innerHTML = '';

        if (tasks.length === 0) {
            container.innerHTML = '<div class="col-12"><p>No available tasks.</p></div>';
            return;
        }

        tasks.forEach(task => {
            const div = document.createElement('div');
            div.className = 'col-md-4 mb-3';
            div.innerHTML = `
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">${task.title}</h5>
                        <p class="card-text">${task.description}</p>
                        <p><strong>Location:</strong> ${task.location}</p>
                        <p><strong>Date:</strong> ${task.dateTime}</p>
                        <button class="btn btn-sm btn-success" onclick="acceptTask(${task.id})">Create Offer</button>
                    </div>
                </div>`;
            container.appendChild(div);
        });
    }

    async function acceptTask(taskId) {
        const offer = {
            TaskId: taskId,
            UserId: @Context.Session.GetInt32("UserId")
        };

        const res = await fetch('/Offer/Create', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(offer)
        });

        if (res.ok) {
            alert("Offer created!");
            loadTasks(); // refresh
        } else {
            alert("Error accepting task.");
        }
    }

    loadTasks(); // initial
    setInterval(loadTasks, 10000); // poll svakih 10s
</script>
