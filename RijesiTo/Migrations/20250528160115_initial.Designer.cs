// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RijesiTo.Data;

#nullable disable

namespace RijesiTo.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250528160115_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("RijesiTo.Models.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("OfferDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("OfferStatus")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("Offers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OfferDate = new DateTime(2025, 5, 28, 21, 1, 14, 722, DateTimeKind.Local).AddTicks(6270),
                            OfferStatus = 0,
                            TaskId = 1,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("RijesiTo.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Vrlo zadovoljan uslugom!",
                            Date = new DateTime(2025, 5, 28, 21, 1, 14, 722, DateTimeKind.Local).AddTicks(6348),
                            Rating = 5,
                            TaskId = 1,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("RijesiTo.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("DepositAmount")
                        .HasColumnType("double");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateTime = new DateTime(2025, 5, 30, 21, 1, 14, 722, DateTimeKind.Local).AddTicks(6158),
                            DepositAmount = 40.0,
                            Description = "Slavina curi i treba ju zamijeniti",
                            Location = "Zagreb",
                            Status = 3,
                            Title = "Popravak slavine",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateTime = new DateTime(2025, 5, 29, 21, 1, 14, 722, DateTimeKind.Local).AddTicks(6185),
                            DepositAmount = 20.0,
                            Description = "Potrebno montirati zidnu policu",
                            Location = "Split",
                            Status = 0,
                            Title = "Montaža police",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("RijesiTo.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            LastName = "",
                            Password = "pass123",
                            Role = 2
                        },
                        new
                        {
                            Id = 2,
                            Email = "ivan@example.com",
                            FirstName = "Ivan",
                            LastName = "Horvat",
                            Password = "pass123",
                            Role = 1
                        },
                        new
                        {
                            Id = 3,
                            Email = "ana@example.com",
                            FirstName = "Ana",
                            LastName = "Kovač",
                            Password = "pass456",
                            Role = 0
                        });
                });

            modelBuilder.Entity("RijesiTo.Models.Offer", b =>
                {
                    b.HasOne("RijesiTo.Models.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RijesiTo.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RijesiTo.Models.Review", b =>
                {
                    b.HasOne("RijesiTo.Models.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RijesiTo.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RijesiTo.Models.Task", b =>
                {
                    b.HasOne("RijesiTo.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
